"""
Django settings for pearbook project.

Generated by 'django-admin startproject' using Django 2.2.11.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""
# celery
import datetime
from .celery import *
import os
import sys

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, BASE_DIR)
sys.path.insert(0, os.path.join(BASE_DIR, 'pearbook'))
sys.path.insert(0, os.path.join(BASE_DIR, 'extra_apps'))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'ypik$!25f5-xlaocom#ko28s-+^gkyhxqeq6bg6-=-!zo%32%4'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
# 允许的外部连接请求
ALLOWED_HOSTS = ['*']

# 解决auth.User.groups: (fields.E304) Reverse accessor for 'User.groups' clashes with reverse accessor for
# 重定义默认用户表
# AUTH_USER_MODEL = 'users.User'
AUTH_USER_MODEL = 'rbac.UserProfile'


# Application definition

SYSTEM_APPS = [
    # 如果自定义user 注释掉admin 删除数据库admin user 相关
    # 'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.sites',
    'django.contrib.staticfiles',
]
SITE_ID = 1
THR_APPS = [
    'channels',  # 必须放第一位！！！ in add_reader raise NotImplementedError NotImplementedError 报错解决
    'rest_framework',
    'rest_framework.authtoken',  # 设置token
    'DjangoUeditor',  # markdown 使用
    'django_filters',  # 过滤器
    # 'haystack',  # elasticsearch 全文索引
]

DIY_APPS = [
    # 用户
    'pearbook.rbac',
    # 商品
    'pearbook.goods',
    # 上传功能组件
    'pearbook.upload'
]

INSTALLED_APPS = SYSTEM_APPS + THR_APPS + DIY_APPS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.middleware.gzip.GZipMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'pearbook.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'pearbook.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

# 数据库配置 mysql
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': "pearbook",
        # 'USER': 'root',
        'USER': 'root',
        # 'PASSWORD': "Bar#123ABC@#!_222",
        'PASSWORD': "Bar#123ABC@#!_222",
        # 'HOST': "106.53.88.14",
        'HOST': "127.0.0.1",
        'PORT': '3306',
        'TIME_ZONE': 'Asia/shanghai'
    }
}

# restFramework 配置
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        # 'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
        # 'rest_framework.authentication.TokenAuthentication'
    ),
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
    ],
    'DEFAULT_PERMISSION_CLASSES': (
        # 'rest_framework.permissions.AllowAny',
        # 'rest_framework.permissions.IsAuthenticated', #必须有
    ),
    # 解决错误 AttributeError: 'AutoSchema' object has no attribute 'get_link'
    "DEFAULT_SCHEMA_CLASS": "rest_framework.schemas.AutoSchema",
    # 全局缓存时间设置
    # "DEFAULT_CACHE_RESPONSE_TIMEOUT": 5,
    # 对爬虫限速功能
    'DEFAULT_THROTTLE_CLASSES': (
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle',
        'rest_framework.throttling.ScopedRateThrottle',
    ),
    # 'DEFAULT_THROTTLE_RATES': {
    #     'anon': '5/minute',
    #     'user': '3/minute',
    #     'goods': '100/day'
    # },
    # api数据返回美化渲染
    'DEFAULT_RENDERER_CLASSES': [
        # JSON
        'rest_framework.renderers.JSONRenderer',
        # api
        'rest_framework.renderers.BrowsableAPIRenderer',
        # admin
        'rest_framework.renderers.AdminRenderer'
    ]
}

#jwt setting
JWT_AUTH = {
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=3),
    'JWT_AUTH_HEADER_PREFIX': 'Bearer',
}

# redis 设置
REDIS_HOST = 'localhost'
REDIS_PORT = 6379
REDIS_DB = 0
REDIS_PASSWORD = None
# django-redis 配置
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/4",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "SOCKET_CONNECT_TIMEOUT": 5,  # socket 建立连接超时设置
            "SOCKET_TIMEOUT": 5,  # 连接建立后的读写操作超时设置
            # 压缩支持
            "COMPRESSOR": "django_redis.compressors.zlib.ZlibCompressor",
            # memcached 异常行为
            "IGNORE_EXCEPTIONS": True,
        }
    }
}
# ## redis日志忽略异常
DJANGO_REDIS_LOG_IGNORED_EXCEPTIONS = True
DJANGO_REDIS_LOGGER = 'some.specified.logger'
# session 会话存储引擎
SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'

# django-channels配置
ASGI_APPLICATION = "pearbook.routing.application"
# channels频道层的缓存
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            # "hosts": [("127.0.0.1", 6379)],
            "hosts": [(REDIS_HOST, REDIS_PORT)],
            "channel_capacity": {
                "http.request": 200,
                "http.response!*": 10,
                # re.compile(r"^websocket.send\!.+"): 20,
                # "symmetric_encryption_keys": [SECRET_KEY],
            },
        },
    },
}

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/
# 文件的存储路径
STATIC_URL = '/static/'
# 公用URL，指向上传文件的基本路径
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
    os.path.join(BASE_DIR)
)
# 向外抛出的url拼接地址 用于指定url路径
MEDIA_URL = "/media/"
# 用于指定上传文件的存储路径
MEDIA_ROOT = os.path.join(BASE_DIR, "media")
# markdown
MARKDOWNX_UPLOAD_MAX_SIZE = 1024 * 1024 * 1024  # 允许上传的最大图片大小为5MB
MARKDOWNX_IMAGE_MAX_SIZE = {'size': (1000, 1000), 'quality': 100}  # 图片大小为1000*1000，不压缩

#yml配置文件存放的目录
YML_CONF_DIR = os.path.join(BASE_DIR, 'conf')

# 部署管理工作区地址
WORKSPACE = '/tmp/workspace/'

# 跨域增加忽略
CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_ALLOW_ALL = True
CORS_ORIGIN_WHITELIST = ['*']
# 跨域允许方法
CORS_ALLOW_METHODS = (
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
    'VIEW',
)
# 跨域请求头
CORS_ALLOW_HEADERS = (
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
)

# 日志
BASE_LOG_DIR = os.path.join(BASE_DIR, 'logs')

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'standard': {
            'format': '[%(asctime)s][%(levelname)s]''[%(filename)s:%(lineno)d][%(message)s]'
        },
        'simple': {
            'format': '[%(levelname)s][%(asctime)s]%(message)s'
        },

    },
    'handlers': {
        'default': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_LOG_DIR, "info_xops.logs"),
            'maxBytes': 1024 * 1024 * 50,
            'backupCount': 3,
            'formatter': 'simple',
            'encoding': 'utf-8',
        },
        'error': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_LOG_DIR, "err_xops.logs"),
            'backupCount': 5,
            'formatter': 'standard',
            'encoding': 'utf-8',
        }

    },
        'loggers': {
            'info': {
                'handlers': ['default'],
                'level': 'INFO',
                'propagate': True,
            },
            'warn':{
                'handlers': ['default'],
                'level': 'WARNING',
                'propagate': True,
            },
            'error': {
                'handlers': ['error'],
                'level': 'ERROR',
            }
    }

}


# Qiniu 配置
QINIU_ACCESS_KEY = 'lnba53EkzuAaEbtRHhO_aSF8Gwqe3H1yPm5u05mh' # 公钥
QINIU_SECRET_KEY = 'phi6LaT9CgfwJvqLlVse5PVN953ThfMdAMjA7GTW' # 私钥
QINIU_BUCKET_NAME = 'forudesigns'   # 对象存储空间
QINIU_DOMAIN = 'http://kyosumwu.cn.qiniudns.com' # 七牛云CDN域名
QINIU_KEY = 'wujk'

# elasticsearch
HAYSTACK_CONNECTIONS = {
    'default': {
        # 使用的Elasticsearch搜索引擎
        'ENGINE': 'haystack.backends.elasticsearch_backend.ElasticsearchSearchEngine',
        # Elasticsearch连接的地址
        'URL': 'http://127.0.0.1:9200/',
        # 默认的索引名
        'INDEX_NAME': 'haystack',
    }
}
# 对elasticsearch 搜索结果分页
HAYSTACK_SEARCH_RESULTS_PER_PAGE = 20  # 分页
# 实时信号量处理器，模型类中数据增加、更新、删除时自动更新索引
HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'